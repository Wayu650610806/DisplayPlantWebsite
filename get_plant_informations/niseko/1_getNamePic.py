import cv2
import os
import numpy as np

# =========================================================================
# üì¶ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡πÅ‡∏ö‡πà‡∏á (‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô)
# =========================================================================

def split_manual_2_1(img):
    """
    ‡πÅ‡∏ö‡πà‡∏á‡∏†‡∏≤‡∏û‡∏≠‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô 4 ‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡πÜ ‡∏Å‡∏±‡∏ô (25% x 4)
    ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô list ‡∏Ç‡∏≠‡∏á (x, y, w, h)
    """
    h, w = img.shape[:2]
    
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏∏‡∏î‡πÅ‡∏ö‡πà‡∏á 3 ‡∏à‡∏∏‡∏î
    split_x_1 = w // 4       # 25%
    split_x_2 = w // 2       # 50%
    split_x_3 = (w * 3) // 4 # 75%
    
    boxes = []
    
    # ‡∏Å‡∏•‡πà‡∏≠‡∏á 1: 0% - 25%
    w1 = split_x_1
    boxes.append((0, 0, w1, h))

    # ‡∏Å‡∏•‡πà‡∏≠‡∏á 2: 25% - 50%
    x2 = split_x_1
    w2 = split_x_2 - split_x_1 
    boxes.append((x2, 0, w2, h))

    # ‡∏Å‡∏•‡πà‡∏≠‡∏á 3: 50% - 75%
    x3 = split_x_2
    w3 = split_x_3 - split_x_2
    boxes.append((x3, 0, w3, h))
    
    # ‡∏Å‡∏•‡πà‡∏≠‡∏á 4: 75% - 100% (‡πÄ‡∏Å‡πá‡∏ö‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)
    x4 = split_x_3
    w4 = w - split_x_3
    boxes.append((x4, 0, w4, h))
    
    return boxes

def get_panel_header_with_tab_box(img, panel_box):
    """
    ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏ï‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏±‡∏ß‡∏Ç‡∏≠‡∏á Panel, ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Å‡∏•‡πà‡∏≠‡∏á‡πÅ‡∏ó‡πá‡∏ö‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß, 
    ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡∏≠‡∏ö‡∏ï‡∏±‡∏î (Header ROI) ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏Å‡∏•‡πà‡∏≠‡∏á‡πÅ‡∏ó‡πá‡∏ö‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÑ‡∏î‡πâ
    """
    x_panel, y_panel, w_panel, h_panel = panel_box
    header_height = 50 
    
    if h_panel < header_height: header_height = h_panel
    header_roi_full = img[y_panel : y_panel + header_height, x_panel : x_panel + w_panel]
    
    gray_roi = cv2.cvtColor(header_roi_full, cv2.COLOR_BGR2GRAY)
    
    # ‡πÉ‡∏ä‡πâ Fixed Threshold 252
    _, thresh_white = cv2.threshold(gray_roi, 252, 255, cv2.THRESH_BINARY) 

    contours, _ = cv2.findContours(thresh_white, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    
    best_tab_box = None
    max_area = 0

    for c in contours:
        x, y, w, h = cv2.boundingRect(c)
        area = w * h
        
        # ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á Contour
        if area > 100: # ‡∏Å‡∏£‡∏≠‡∏á Noise ‡πÄ‡∏•‡πá‡∏Å‡πÜ
             if w < w_panel * 0.4 and h > header_height * 0.3:
                 if area > max_area:
                     max_area = area
                     best_tab_box = (x, y, w, h)
                     
    # ‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô Header ROI (‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡∏≠‡∏ö‡∏ï‡∏±‡∏î 50px ‡πÅ‡∏£‡∏Å) ‡πÅ‡∏•‡∏∞ Bounding Box ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ó‡πá‡∏ö
    return header_roi_full, best_tab_box

# =========================================================================
# üì¶ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û (üî• ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß)
# =========================================================================

def save_tab_box_image(header_roi_full, tab_box, base_filename, panel_index, output_dir, padding_px=10):
    """
    ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏ï‡∏±‡∏î‡∏†‡∏≤‡∏û‡∏Å‡∏•‡πà‡∏≠‡∏á‡πÅ‡∏ó‡πá‡∏ö‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö (‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡∏¢‡∏≤‡∏¢‡∏Ç‡∏≠‡∏ö padding) ‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå
    """
    if tab_box is None:
        return False
        
    x_tab, y_tab, w_tab, h_tab = tab_box
    h_header, w_header = header_roi_full.shape[:2]
    
    # 1. üî• ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏û‡∏¥‡∏Å‡∏±‡∏î‡πÉ‡∏´‡∏°‡πà (‡∏Ç‡∏¢‡∏≤‡∏¢‡∏Ç‡∏≠‡∏ö) ‡πÅ‡∏•‡∏∞‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡πâ‡∏ô‡∏Ç‡∏≠‡∏ö
    x1 = max(0, x_tab - padding_px)
    y1 = max(0, y_tab - padding_px)
    x2 = min(w_header, x_tab + w_tab + padding_px)
    y2 = min(h_header, y_tab + h_tab + padding_px)

    # 2. ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏ï‡∏±‡∏î‡∏†‡∏≤‡∏û‡πÅ‡∏ó‡πá‡∏ö‡∏à‡∏≤‡∏Å Header ROI ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏Ç‡∏¢‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß
    # [y_start : y_end, x_start : x_end]
    cropped_tab_img = header_roi_full[y1:y2, x1:x2]
    
    if cropped_tab_img.size == 0:
        print(f"‚ö†Ô∏è Error: Cropped image is empty for {base_filename}_P{panel_index}. Check padding/coords.")
        return False

    # 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
    filename = f"{os.path.splitext(base_filename)[0]}_P{panel_index}_Tab.png"
    save_path = os.path.join(output_dir, filename)
    
    # ‡∏Å‡∏≤‡∏£‡∏Ç‡∏¢‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠ SIFT ‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå (‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å)
    # cropped_tab_img = cv2.resize(cropped_tab_img, None, fx=2, fy=2, interpolation=cv2.INTER_CUBIC)

    cv2.imwrite(save_path, cropped_tab_img)
    return True

# =========================================================================
# üì¶ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏´‡∏•‡∏±‡∏Å (üî• ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß)
# =========================================================================

def show_images_in_folder(folder, output_folder):
    image_files = [f for f in os.listdir(folder) if f.lower().endswith(('.png', '.jpg', '.jpeg'))]
    image_files.sort()
    if not image_files:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏π‡∏õ‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå:", folder)
        return
        
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
    os.makedirs(output_folder, exist_ok=True)
    
    # ‚ö†Ô∏è (‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡πÑ‡∏î‡πâ) ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Padding (‡∏û‡∏¥‡∏Å‡πÄ‡∏ã‡∏•) ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏Ç‡∏¢‡∏≤‡∏¢‡∏£‡∏≠‡∏ö‡∏Å‡∏•‡πà‡∏≠‡∏á‡πÅ‡∏ó‡πá‡∏ö‡∏ï‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
    TAB_SAVE_PADDING = 80

    idx = 0
    max_display_w, max_display_h = 1600, 900
    
    while True:
        base_filename = image_files[idx]
        path = os.path.join(folder, base_filename)
        img = cv2.imread(path)
        if img is None:
            print(f"‚ö†Ô∏è ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {path}")
            idx = (idx + 1) % len(image_files)
            continue

        boxes = split_manual_2_1(img)
        tab_box_info = ""
        
        # üéØ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Panel ‡∏ó‡∏µ‡πà 1 ‡πÅ‡∏•‡∏∞ 2 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û‡πÅ‡∏ó‡πá‡∏ö
        panels_to_process = [1] # ‡∏™‡∏ô‡πÉ‡∏à Panel 2 (Index 1)

        # 1. ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏ï‡∏±‡∏î‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Panel 2 Header ROI
        if len(boxes) >= 2:
            
            # ‡∏î‡∏∂‡∏á Header ROI ‡πÅ‡∏•‡∏∞‡∏´‡∏≤ Bounding Box ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ó‡πá‡∏ö ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Panel 2
            # üî• ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏ú‡∏°‡πÅ‡∏Å‡πâ‡πÄ‡∏õ‡πá‡∏ô boxes[0] ‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏Ñ‡∏∏‡∏ì‡∏™‡∏ô‡πÉ‡∏à Panel 1 (Index 0) 
            # ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ Panel 2 ‡πÉ‡∏´‡πâ‡πÅ‡∏Å‡πâ‡πÄ‡∏õ‡πá‡∏ô boxes[1]
            header_roi, tab_box = get_panel_header_with_tab_box(img, boxes[1]) 
            
            # ‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏û Header ROI ‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏û‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏´‡∏•‡∏±‡∏Å
            display_img = header_roi.copy() 
            
            # 2. üî• ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û‡πÅ‡∏ó‡πá‡∏ö (‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤ Padding ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ)
            # (‡∏ú‡∏°‡πÉ‡∏ä‡πâ panel_index=1 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏õ‡πá‡∏ô _P1_Tab.png)
            is_saved = save_tab_box_image(header_roi, tab_box, base_filename, 1, 
                                          output_folder, padding_px=TAB_SAVE_PADDING)

            # 3. ‡∏ß‡∏≤‡∏î Bounding Box ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ó‡πá‡∏ö (‡∏ñ‡πâ‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö)
            if tab_box:
                x_tab, y_tab, w_tab, h_tab = tab_box
                cv2.rectangle(display_img, (x_tab, y_tab), (x_tab + w_tab, y_tab + h_tab), (0, 0, 255), 2)
                tab_box_info = f"Tab Box W:{w_tab} H:{h_tab} | SAVED: {is_saved}"
            else:
                tab_box_info = "Tab Box: NOT DETECTED"
                
        else:
            display_img = img.copy()
            cv2.putText(display_img, "ERROR: Not enough panels detected!", (10, 50),
                          cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 2)
            
        # 4. ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö
        cv2.putText(display_img,
                    f"Showing Panel 1 Header ROI | {tab_box_info}", # ‡πÅ‡∏Å‡πâ‡πÄ‡∏õ‡πá‡∏ô Panel 1
                    (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 0), 2)
        cv2.putText(display_img, f"{base_filename} ({idx+1}/{len(image_files)})",
                    (10, 60), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 0), 2)


        # ‡∏¢‡πà‡∏≠‡∏†‡∏≤‡∏û‡πÉ‡∏´‡πâ‡∏û‡∏≠‡∏î‡∏µ‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
        h_disp, w_disp = display_img.shape[:2]
        scale = min(max_display_w / w_disp, max_display_h / h_disp, 1.0)
        if scale < 1.0:
            display_img = cv2.resize(display_img, None, fx=scale, fy=scale, interpolation=cv2.INTER_AREA)

        cv2.imshow(f"Panel 1 Header ROI + Tab Detection", display_img) # ‡πÅ‡∏Å‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á
        key = cv2.waitKey(0) & 0xFF

        if key == ord('d'): idx = (idx + 1) % len(image_files)
        elif key == ord('a'): idx = (idx - 1) % len(image_files)
        elif key == ord('q'): break

    cv2.destroyAllWindows()


if __name__ == "__main__":
    # ‚ö†Ô∏è 1. ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô path ‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡∏ä‡∏µ‡πâ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
    input_folder = r"C:\Project\DisplayPlantWebsite\uploaded_images\tv2\2" 
    
    # ‚ö†Ô∏è 2. ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û‡πÅ‡∏ó‡πá‡∏ö‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡∏≠‡∏ö‡∏ï‡∏±‡∏î‡πÅ‡∏•‡πâ‡∏ß
    output_folder = r"C:\Project\DisplayPlantWebsite\output_tab_images"
    
    if not os.path.isdir(input_folder):
        print(f"üö® Error: ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ï‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏°‡πà‡∏û‡∏ö: {input_folder}")
    else:
        show_images_in_folder(input_folder, output_folder)
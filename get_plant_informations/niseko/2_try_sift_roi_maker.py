import cv2
import os
import numpy as np
import json
from typing import Tuple, Optional, List, Any

# =========================================================================
# üì¶ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡πÅ‡∏ö‡πà‡∏á (‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô)
# =========================================================================

def split_manual_2_1(img):
    """
    ‡πÅ‡∏ö‡πà‡∏á‡∏†‡∏≤‡∏û‡∏≠‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô 4 ‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡πÜ ‡∏Å‡∏±‡∏ô (25% x 4)
    ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô list ‡∏Ç‡∏≠‡∏á (x, y, w, h)
    """
    h, w = img.shape[:2]
    
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏∏‡∏î‡πÅ‡∏ö‡πà‡∏á 3 ‡∏à‡∏∏‡∏î
    split_x_1 = w // 4       # 25%
    split_x_2 = w // 2       # 50%
    split_x_3 = (w * 3) // 4 # 75%
    
    boxes = []
    
    # ‡∏Å‡∏•‡πà‡∏≠‡∏á 1: 0% - 25%
    w1 = split_x_1
    boxes.append((0, 0, w1, h))

    # ‡∏Å‡∏•‡πà‡∏≠‡∏á 2: 25% - 50%
    x2 = split_x_1
    w2 = split_x_2 - split_x_1 
    boxes.append((x2, 0, w2, h))

    # ‡∏Å‡∏•‡πà‡∏≠‡∏á 3: 50% - 75%
    x3 = split_x_2
    w3 = split_x_3 - split_x_2
    boxes.append((x3, 0, w3, h))
    
    # ‡∏Å‡∏•‡πà‡∏≠‡∏á 4: 75% - 100% (‡πÄ‡∏Å‡πá‡∏ö‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)
    x4 = split_x_3
    w4 = w - split_x_3
    boxes.append((x4, 0, w4, h))
    
    return boxes


# =========================================================================
# üîé ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô SIFT Matching (‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô)
# =========================================================================

def find_tab_sift(template_img: np.ndarray, target_img: np.ndarray) -> Tuple[Optional[Tuple[int, int, int, int]], Any]:
    """
    ‡πÉ‡∏ä‡πâ SIFT ‡πÅ‡∏•‡∏∞ Flann-based Matcher ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á template_img ‡πÉ‡∏ô target_img
    """
    sift = cv2.SIFT_create()
    kp_template, des_template = sift.detectAndCompute(template_img, None)
    kp_target, des_target = sift.detectAndCompute(target_img, None)
    
    if des_template is None or des_target is None or len(des_template) < 2 or len(des_target) < 2:
        return None, None 

    des_template = des_template.astype(np.float32)
    des_target = des_target.astype(np.float32)

    FLANN_INDEX_KDTREE = 1
    index_params = dict(algorithm=FLANN_INDEX_KDTREE, trees=5)
    search_params = dict(checks=50) 
    flann = cv2.FlannBasedMatcher(index_params, search_params)
    
    try:
        matches = flann.knnMatch(des_template, des_target, k=2)
    except cv2.error:
        return None, None
        
    good_matches = []
    for m, n in matches:
        if m.distance < 0.75 * n.distance:
            good_matches.append(m)

    MIN_MATCH_COUNT = 7

    if len(good_matches) > MIN_MATCH_COUNT:
        src_pts = np.float32([kp_template[m.queryIdx].pt for m in good_matches]).reshape(-1, 1, 2)
        dst_pts = np.float32([kp_target[m.trainIdx].pt for m in good_matches]).reshape(-1, 1, 2)

        M, mask = cv2.findHomography(src_pts, dst_pts, cv2.RANSAC, 5.0)

        if M is not None:
            h, w = template_img.shape[:2]
            pts = np.float32([[0, 0], [0, h - 1], [w - 1, h - 1], [w - 1, 0]]).reshape(-1, 1, 2)
            dst = cv2.perspectiveTransform(pts, M)
            
            x_min = int(np.min(dst[:, 0, 0]))
            y_min = int(np.min(dst[:, 0, 1]))
            x_max = int(np.max(dst[:, 0, 0]))
            y_max = int(np.max(dst[:, 0, 1]))
            
            tab_box_sift = (x_min, y_min, x_max - x_min, y_max - y_min)
            
            return tab_box_sift, (kp_template, kp_target, good_matches, mask, M, dst)
        else:
            return None, None
    else:
        return None, None

# =========================================================================
# üõ†Ô∏è ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏™‡∏£‡∏¥‡∏° (‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô)
# =========================================================================

def check_overlap(box1: Tuple[int, int, int, int], box2: Tuple[int, int, int, int]) -> bool:
    x1, y1, w1, h1 = box1
    x2, y2, w2, h2 = box2
    r1 = x1 + w1
    b1 = y1 + h1
    r2 = x2 + w2
    b2 = y2 + h2
    if r1 < x2 or r2 < x1 or b1 < y2 or b2 < y1:
        return False
    return True

def read_image_unicode_path(path: str) -> Optional[np.ndarray]:
    """
    ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡∏û‡∏≤‡∏ò‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏±‡∏Å‡∏Ç‡∏£‡∏∞ Unicode (‡πÄ‡∏ä‡πà‡∏ô ‡∏†‡∏≤‡∏©‡∏≤‡∏ç‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏ô) ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ Buffer
    """
    img_data = np.fromfile(path, np.uint8)
    if img_data.size == 0:
        return None
    return cv2.imdecode(img_data, cv2.IMREAD_COLOR)

# =========================================================================
# üî• ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà: ‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏î ROI ‡πÅ‡∏ö‡∏ö‡πÇ‡∏ï‡πâ‡∏ï‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å JSON
# =========================================================================

# =========================================================================
# üî• ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà: ‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏î ROI ‡πÅ‡∏ö‡∏ö‡πÇ‡∏ï‡πâ‡∏ï‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å JSON (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß)
# =========================================================================

def interactive_roi_marking(cropped_img: np.ndarray, panel_box_abs: Tuple[int, int, int, int], sift_box_rel: Tuple[int, int, int, int], img_size: Tuple[int, int], filename_prefix: str, output_dir: str) -> bool:
    """
    ‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏•‡∏≤‡∏Å ROI ‡∏ö‡∏ô‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏Ñ‡∏£‡∏≠‡∏ö‡∏ï‡∏±‡∏î
    (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á: ‡∏¢‡πà‡∏≠‡∏Ç‡∏ô‡∏≤‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á selectROI ‡∏ñ‡πâ‡∏≤‡∏†‡∏≤‡∏û‡πÉ‡∏´‡∏ç‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ)
    """
    h_panel, w_panel = cropped_img.shape[:2]
    img_w_abs, img_h_abs = img_size
    x_panel_abs, y_panel_abs, _, _ = panel_box_abs

    # --- 1. NEW: ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö selectROI ---
    max_display_w, max_display_h = 1600, 900 # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ô‡∏µ‡πâ‡∏ï‡∏≤‡∏°‡∏Ç‡∏ô‡∏≤‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
    
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡πà‡∏≠ (scale)
    scale = min(max_display_w / w_panel, max_display_h / h_panel, 1.0)
    
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏ú‡∏Å‡∏ú‡∏±‡∏ô (inverse scale) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏õ‡∏•‡∏á‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏Å‡∏•‡∏±‡∏ö
    inv_scale = 1.0 / scale if scale > 0 else 1.0

    # ----------------------------------------------------

    rois = {}  # {label: [x1n,y1n,x2n,y2n]}
    
    print("\n========================================================")
    print("üéØ MODE: INTERACTIVE ROI MARKING")
    print("‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ: ‡∏•‡∏≤‡∏Å selectROI -> ‡∏Å‡∏î Enter ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô -> ‡∏û‡∏¥‡∏°‡∏û‡πå label ‡πÉ‡∏ô console -> Enter ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
    print("‡∏Å‡∏î q ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏†‡∏≤‡∏û ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ROI ‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å JSON")
    print(f"(‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á ROI ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏¢‡πà‡∏≠‡∏Ç‡∏ô‡∏≤‡∏î‡∏•‡∏á {scale*100:.1f}% ‡∏´‡∏≤‡∏Å‡πÉ‡∏´‡∏ç‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ)")
    print("========================================================")
    
    # temp_img ‡∏Ñ‡∏∑‡∏≠‡∏†‡∏≤‡∏û‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏ï‡πá‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡∏∞‡∏™‡∏° ROI ‡∏ó‡∏µ‡πà‡∏ß‡∏≤‡∏î‡πÑ‡∏ß‡πâ
    temp_img = cropped_img.copy()

    while True:
        # ‡∏ß‡∏≤‡∏î SIFT Box (‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô) ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏ö‡∏ô‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏≤‡∏Å ROI
        x_sift, y_sift, w_sift, h_sift = sift_box_rel
        cv2.rectangle(temp_img, (x_sift, y_sift), (x_sift + w_sift, y_sift + h_sift), (255, 0, 0), 2)
        
        cv2.putText(temp_img, "Draw ROI (Blue Box is SIFT Match)", (10, h_panel - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 255), 1)

        # --- 2. NEW: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏¢‡πà‡∏≠‡∏Ç‡∏ô‡∏≤‡∏î‡πÅ‡∏•‡πâ‡∏ß *‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô* ---
        if scale < 1.0:
            display_img_resized = cv2.resize(temp_img, None, fx=scale, fy=scale, interpolation=cv2.INTER_AREA)
        else:
            # ‡∏ñ‡πâ‡∏≤‡∏†‡∏≤‡∏û‡πÑ‡∏°‡πà‡πÉ‡∏´‡∏ç‡πà‡πÄ‡∏Å‡∏¥‡∏ô ‡∏Å‡πá‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏ô‡∏≤‡∏Ç‡∏≠‡∏á temp_img
            display_img_resized = temp_img.copy() 
        
        # 3. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ROI (‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å *‡∏¢‡πà‡∏≠* ‡πÅ‡∏•‡πâ‡∏ß)
        r = cv2.selectROI("Interactive ROI Marker (Panel View)", display_img_resized, False, False)
        cv2.destroyAllWindows()
        
        # r ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏°‡∏≤‡∏Ñ‡∏∑‡∏≠ (x, y, w, h) ‡∏ö‡∏ô *‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏¢‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß*
        x_scaled, y_scaled, w_scaled, h_scaled = map(int, r)
        
        # --- 4. NEW: ‡πÅ‡∏õ‡∏•‡∏á‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏ô‡∏≤‡∏î‡∏î‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏¥‡∏° (Original) ---
        # ‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏π‡∏ì‡∏î‡πâ‡∏ß‡∏¢‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏ú‡∏Å‡∏ú‡∏±‡∏ô (inv_scale)
        x_rel = int(x_scaled * inv_scale)
        y_rel = int(y_scaled * inv_scale)
        w_rel = int(w_scaled * inv_scale)
        h_rel = int(h_scaled * inv_scale)
        # --------------------------------------------------------

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (‡πÄ‡∏ä‡πà‡∏ô ‡∏Å‡∏î Q)
        # (‡πÉ‡∏ä‡πâ w_rel, h_rel ‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß)
        if w_rel == 0 or h_rel == 0:
            break

        # 5. ‡πÉ‡∏™‡πà label (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
        label = input("Label ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ROI ‡∏ô‡∏µ‡πâ (‡πÄ‡∏ä‡πà‡∏ô Temp_A, Fan_Hz): ").strip()
        if not label:
            label = f"roi_{len(rois)+1}"
        
        # 6. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏û‡∏¥‡∏Å‡∏±‡∏î Normalized (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
        # (‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡πÅ‡∏•‡πâ‡∏ß ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ x_rel, y_rel, w_rel, h_rel ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏™‡πÄ‡∏Å‡∏•‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß)
        
        # ‡πÅ‡∏õ‡∏•‡∏á‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ó‡∏ò‡πå (‡πÉ‡∏ô Panel) ‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏™‡∏±‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå (‡πÉ‡∏ô‡∏†‡∏≤‡∏û‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö)
        x_abs = x_panel_abs + x_rel
        y_abs = y_panel_abs + y_rel
        w_abs = w_rel
        h_abs = h_rel

        # Normalized Coordinates (‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏û‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)
        x1n, y1n = x_abs / img_w_abs, y_abs / img_h_abs
        x2n, y2n = (x_abs + w_abs) / img_w_abs, (y_abs + h_abs) / img_h_abs
        
        # 7. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å ROI (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
        rois[label] = [x1n, y1n, x2n, y2n]
        print(f"‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å {label} -> Normalized: [{x1n:.4f}, {y1n:.4f}, {x2n:.4f}, {y2n:.4f}]")
        
        # 8. ‡∏ß‡∏≤‡∏î ROI ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏•‡∏á‡∏ö‡∏ô‡∏†‡∏≤‡∏û‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß (‡∏™‡∏µ‡πÅ‡∏î‡∏á)
        # (‡∏ß‡∏≤‡∏î‡∏•‡∏á‡∏ö‡∏ô temp_img ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô *‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏ï‡πá‡∏°* ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡∏ß‡∏ô‡∏£‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á)
        cv2.rectangle(temp_img, (x_rel, y_rel), (x_rel + w_rel, y_rel + h_rel), (0, 0, 255), 2)
        
    # --- 9. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å JSON ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏•‡∏π‡∏õ (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ---
    
    if rois:
        json_data = {
            "image_size": [img_w_abs, img_h_abs],
            "rois": rois
        }
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå JSON (Èà¥Êú®Â∑•Ê•≠.json)
        json_filename = f"{os.path.splitext(filename_prefix)[0]}.json"
        save_path = os.path.join(output_dir, json_filename)
        
        try:
            with open(save_path, "w", encoding="utf-8") as f:
                json.dump(json_data, f, ensure_ascii=False, indent=2)
            print(f"‚úî FINAL JSON Saved: {json_filename} ({len(rois)} ROIs)")
            return True
        except Exception as e:
            print(f"‚ùå JSON Save Error: {e}")
            return False
    else:
        print("‚ÑπÔ∏è No ROI was marked. JSON not saved.")
        return False


# =========================================================================
# ‚öôÔ∏è ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏´‡∏•‡∏±‡∏Å (‡πÉ‡∏ä‡πâ FIXED TEMPLATE ‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏î‡∏†‡∏≤‡∏û)
# =========================================================================

def show_images_in_folder(folder: str, output_folder: str):
    image_files = [f for f in os.listdir(folder) if f.lower().endswith(('.png', '.jpg', '.jpeg'))]
    image_files.sort()
    if not image_files:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏π‡∏õ‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå:", folder)
        return
    
    # --- 1. ‡πÇ‡∏´‡∏•‡∏î FIXED TEMPLATE ---
    FIXED_TEMPLATE_FILENAME = "niseko.png"
    fixed_template_path = os.path.join(output_folder, FIXED_TEMPLATE_FILENAME)
    template_img = None
    
    if os.path.exists(fixed_template_path):
        template_img = read_image_unicode_path(fixed_template_path)
        if template_img is None:
            sift_load_status = f"SIFT Template: ‚ö†Ô∏è Error reading {FIXED_TEMPLATE_FILENAME}."
        else:
            sift_load_status = f"SIFT Template: ‚úÖ {FIXED_TEMPLATE_FILENAME} loaded."
    else:
        sift_load_status = f"SIFT Template: ‚ùå File {FIXED_TEMPLATE_FILENAME} NOT FOUND."

    idx = 0
    max_display_w, max_display_h = 1600, 900
    
    while True:
        base_filename = image_files[idx]
        path = os.path.join(folder, base_filename)
        img = read_image_unicode_path(path) # Target Image
        
        if img is None:
            print(f"‚ö†Ô∏è ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {path}")
            idx = (idx + 1) % len(image_files)
            continue
            
        h, w = img.shape[:2] # ‡πÑ‡∏î‡πâ‡∏Ç‡∏ô‡∏≤‡∏î‡∏†‡∏≤‡∏û‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö

        # 2. ‡πÅ‡∏ö‡πà‡∏á‡∏†‡∏≤‡∏û‡πÄ‡∏õ‡πá‡∏ô Panel Boxes
        boxes = split_manual_2_1(img) # [Box 0, Box 1, Box 2]
        sift_box = None
        sift_info = "SIFT: Match Not Attempted"
        panel_found_index = -1
        display_img = img.copy() 
        display_text = "Original Image"
        json_saved = False
        
        # 3. SIFT Matching
        if template_img is not None:
            sift_box, _ = find_tab_sift(template_img, img)
        
        # 4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Panel ‡∏ó‡∏µ‡πà SIFT ‡πÄ‡∏à‡∏≠‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
        if sift_box:
            sift_info = f"SIFT: DETECTED W:{sift_box[2]} H:{sift_box[3]}"
            x_sift_abs, y_sift_abs, w_sift, h_sift = sift_box # ‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏™‡∏±‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå

            # 4.1 ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Panel ‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≠‡∏ô‡∏ó‡∏±‡∏ö
            for i, p_box in enumerate(boxes):
                if check_overlap(sift_box, p_box):
                    panel_found_index = i
                    x_p, y_p, w_p, h_p = p_box # ‡∏û‡∏¥‡∏Å‡∏±‡∏î Panel Box
                    
                    # üî• 4.2 ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏ï‡∏±‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Panel ‡∏ó‡∏µ‡πà‡∏û‡∏ö 
                    cropped_img = img[y_p:y_p+h_p, x_p:x_p+w_p].copy() 
                    
                    # 4.3 ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏û‡∏¥‡∏Å‡∏±‡∏î SIFT Box ‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ó‡∏ò‡πå‡πÉ‡∏ô‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏Ñ‡∏£‡∏≠‡∏ö‡∏ï‡∏±‡∏î
                    x_rel = x_sift_abs - x_p
                    y_rel = y_sift_abs - y_p
                    sift_box_rel = (x_rel, y_rel, w_sift, h_sift)

                    # 4.4 ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÇ‡∏´‡∏°‡∏î‡∏ß‡∏≤‡∏î ROI ‡πÅ‡∏ö‡∏ö‡πÇ‡∏ï‡πâ‡∏ï‡∏≠‡∏ö!
                    print(f"\n*** SIFT found tab in Panel {panel_found_index + 1} ***")
                    json_saved = interactive_roi_marking(
                        cropped_img, 
                        p_box, 
                        sift_box_rel, 
                        (w, h), 
                        FIXED_TEMPLATE_FILENAME, 
                        output_folder
                    )
                    
                    # 4.5 ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏†‡∏≤‡∏û‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• (‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏û‡πÄ‡∏ï‡πá‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏£‡∏≠‡∏ö Panel ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤ ROI ‡∏ñ‡∏π‡∏Å‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÅ‡∏•‡πâ‡∏ß)
                    display_img = img.copy()
                    cv2.rectangle(display_img, (x_p, y_p), (x_p + w_p, y_p + h_p), (0, 0, 255), 4) # Panel (‡∏™‡∏µ‡πÅ‡∏î‡∏á)
                    display_text = f"Panel {panel_found_index + 1} Marked. Check JSON."
                        
                    break # ‡πÄ‡∏à‡∏≠ Panel ‡πÅ‡∏£‡∏Å‡∏Å‡πá‡∏û‡∏≠
            
            if panel_found_index == -1:
                cv2.rectangle(display_img, (x_sift_abs, y_sift_abs), (x_sift_abs + w_sift, y_sift_abs + h_sift), (255, 0, 0), 2)
                display_text = "SIFT Found, but outside main panels. No JSON."
                
        else:
            sift_info = "SIFT: NOT FOUND"
            display_text = "Match Failed."
            

        # 5. ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö
        cv2.putText(display_img, sift_load_status, (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 0), 2)
        cv2.putText(display_img, 
                    f"{base_filename} ({idx+1}/{len(image_files)}) | {sift_info}",
                    (10, 60), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255, 0, 0), 2)
        cv2.putText(display_img, 
                    f"Status: {display_text}",
                    (10, 90), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 255), 2)
        
        # 6. ‡∏¢‡πà‡∏≠‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
        h_disp, w_disp = display_img.shape[:2]
        scale = min(max_display_w / w_disp, max_display_h / h_disp, 1.0)
        if scale < 1.0:
            display_img = cv2.resize(display_img, None, fx=scale, fy=scale, interpolation=cv2.INTER_AREA)

        # ‚ö†Ô∏è ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û‡πÄ‡∏ï‡πá‡∏°
        cv2.imshow(f"SIFT Result & ROI Status (Full Image)", display_img)
        
        # ‚ö†Ô∏è ‡πÉ‡∏ä‡πâ waitKey(0) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏π‡∏õ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
        key = cv2.waitKey(0) & 0xFF 

        if key == ord('d'): idx = (idx + 1) % len(image_files)
        elif key == ord('a'): idx = (idx - 1) % len(image_files)
        elif key == ord('q'): break

    cv2.destroyAllWindows()

# =========================================================================
# üöÄ ‡∏à‡∏∏‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°
# =========================================================================

if __name__ == "__main__":
    # ‚ö†Ô∏è 1. ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö (Target Images)
    input_folder = r"C:\Project\DisplayPlantWebsite\uploaded_images\tv2\2" 
    
    # ‚ö†Ô∏è 2. ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå Template "Èà¥Êú®Â∑•Ê•≠.png" ‡πÅ‡∏•‡∏∞‡∏à‡∏∞‡πÄ‡∏ã‡∏ü JSON ‡πÑ‡∏ß‡πâ
    output_folder = r"C:\Project\DisplayPlantWebsite\output_tab_images"
    
    if not os.path.isdir(input_folder):
        print(f"üö® Error: ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ï‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏°‡πà‡∏û‡∏ö: {input_folder}")
    else:
        show_images_in_folder(input_folder, output_folder)